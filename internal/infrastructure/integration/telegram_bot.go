package integration


import (
	"context"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	tg "github.com/troxanna/pr-chat-backend/pkg/bot"
)

const messageQuestionTemplate = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ REST API —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –£—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ 2 –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5:
0 ‚Äî –ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è –∏–∑—É—á–∞—Ç—å
1 ‚Äî –ù–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã. –ù–µ –∏–∑—É—á–∞–ª –∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
2 ‚Äî –°—Ä–µ–¥–Ω—è—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞. –ò–∑—É—á–∞–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø—Ä–∞–∫—Ç–∏–∫–∏ –±—ã–ª–æ –º–∞–ª–æ
3 ‚Äî –•–æ—Ä–æ—à–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4 ‚Äî –≠–∫—Å–ø–µ—Ä—Ç. –ó–Ω–∞–µ—Ç —Ç–æ–Ω–∫–æ—Å—Ç–∏, –¥–µ–ª–∏—Ç—Å—è –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏
5 ‚Äî –ì—É—Ä—É. –ì–æ—Ç–æ–≤ –≤—ã—Å—Ç—É–ø–∞—Ç—å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö
–ü–æ—Å—Ç—Ä–æ–π –≤–æ–ø—Ä–æ—Å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –∏–º–µ–Ω–Ω–æ –¥–ª—è —É—Ä–æ–≤–Ω—è 2 –∏ –ø–æ–∑–≤–æ–ª—è–ª —Ä–∞—Å–∫—Ä—ã—Ç—å –≥–ª—É–±–∏–Ω—É –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å.`

type TelegramBotService struct {
	client     *tg.Client
	chatGPTSvc ChatGPTService // ‚Üê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ChatGPT
}

func NewTelegramBotService(client *tg.Client, chatGPTSvc ChatGPTService) TelegramBotService {
	return TelegramBotService{
		client:     client,
		chatGPTSvc: chatGPTSvc,
	}
}

func (s TelegramBotService) Start(ctx context.Context) error {
	updates := s.client.UpdatesChan()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case update := <-updates:

			switch {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			case update.Message != nil:
				if update.Message.IsCommand() {
					switch update.Message.Command() {
					case "start":
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç.")
						msg.ReplyMarkup = s.buildStartKeyboard()
						s.client.API().Send(msg)
					default:
						s.client.SendMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
					}
				} else {
					s.client.SendMessage(update.Message.Chat.ID, fmt.Sprintf("–í—ã —Å–∫–∞–∑–∞–ª–∏: %s", update.Message.Text))
				}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
			case update.CallbackQuery != nil:
				data := update.CallbackQuery.Data
				switch data {
				case "fill_form":
					go s.handleFormRequest(ctx, update.CallbackQuery)
				default:
					s.client.SendMessage(update.CallbackQuery.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
				}
			}
		}
	}
}

func (s TelegramBotService) buildStartKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "fill_form")
	row := tgbotapi.NewInlineKeyboardRow(button)
	return tgbotapi.NewInlineKeyboardMarkup(row)
}

func (s TelegramBotService) handleFormRequest(ctx context.Context, q *tgbotapi.CallbackQuery) {
	chatID := q.Message.Chat.ID

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram'—É, —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
	_, err := s.client.API().Request(tgbotapi.NewCallback(q.ID, "–§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É..."))

	if err != nil {
		log.Printf("failed to confirm callback: %v", err)
	}

	// –í—ã–∑–æ–≤ ChatGPT
	response, err := s.chatGPTSvc.AskUser(ctx, messageQuestionTemplate)
	if err != nil {
		log.Printf("ChatGPT error: %v", err)
		s.client.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–Ω–∫–µ—Ç—ã.")
		return
	}

	s.client.SendMessage(chatID, "–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"+response)
}

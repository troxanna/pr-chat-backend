package integration

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"
)

type ContextItem struct {
	RequestMessage  string `json:"requestMessage"`
	RequestTime     string `json:"requestTime"`
	ResponseMessage string `json:"responseMessage"`
	ResponseTime    string `json:"responseTime"`
}

type Data struct {
	UserCrocCode     string        `json:"userCrocCode"`
	DialogIdentifier string        `json:"dialogIdentifier"`
	AIModelCode      int           `json:"aiModelCode"`
	AIModelName      string        `json:"aiModelName"`
	Warning          int           `json:"warning"`
	LastMessage      string        `json:"lastMessage"`
	LastResponseTime string        `json:"lastResponseTime"`
	Context          []ContextItem `json:"context"`
}

type Status struct {
	IsSuccess   bool   `json:"isSuccess"`
	Description string `json:"description"`
}

type FullResponse struct {
	Status Status `json:"status"`
	Data   Data   `json:"data"`
}

type Client struct {
	httpClient *http.Client
	baseURL    string
	apiKey     string
}

func NewClient(
	httpClient *http.Client,
	baseURL string,
	apiKey string,
) Client {
	return Client{
		httpClient: httpClient,
		baseURL:    baseURL,
		apiKey:     apiKey,
	}
}

type CompleteSessionRequest struct {
	OperatingSystemCode int    `json:"operatingSystemCode"`
	APIKey              string `json:"apiKey"`
	DialogIdentifier    string `json:"dialogIdentifier"`
}

type SendPromptForQuestionRequest struct {
	OperatingSystemCode int    `json:"operatingSystemCode"`
	APIKey              string `json:"apiKey"`
	UserDomainName      string `json:"userDomainName"`
	DialogIdentifier    string `json:"dialogIdentifier"`
	AIModelCode         int    `json:"aiModelCode"`
	Message             string `json:"Message"`
}

type GetResultForQuestionRequest struct {
	OperatingSystemCode int    `json:"operatingSystemCode"`
	APIKey              string `json:"apiKey"`
	DialogIdentifier    string `json:"dialogIdentifier"`
}

func (c Client) SendPromptForQuestion(uid string) {
	url := "https://gpt.orionsoft.ru/api/External/PostNewRequest"
	// url := c.baseURL

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä—É—Ç–∏–º —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞)
	requestData := SendPromptForQuestionRequest{
		OperatingSystemCode: 12,
		APIKey:              "OrVrQoQ6T43vk0McGmHOsdvvTiX446RJ",
		UserDomainName:      "Team6QSXgoYCNNsG",
		DialogIdentifier:    uid,
		AIModelCode:         1,
		Message: `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ PosgreSQL —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –£—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ 2 –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —à–∫–∞–ª–µ:

0 ‚Äî –ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è –∏–∑—É—á–∞—Ç—å
1 ‚Äî –ù–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã. –ù–µ –∏–∑—É—á–∞–ª –∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
2 ‚Äî –°—Ä–µ–¥–Ω—è—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞. –ò–∑—É—á–∞–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø—Ä–∞–∫—Ç–∏–∫–∏ –±—ã–ª–æ –º–∞–ª–æ
3 ‚Äî –•–æ—Ä–æ—à–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4 ‚Äî –≠–∫—Å–ø–µ—Ä—Ç. –ó–Ω–∞–µ—Ç —Ç–æ–Ω–∫–æ—Å—Ç–∏, –¥–µ–ª–∏—Ç—Å—è –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏
5 ‚Äî –ì—É—Ä—É. –ì–æ—Ç–æ–≤ –≤—ã—Å—Ç—É–ø–∞—Ç—å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö

–ü–æ—Å—Ç—Ä–æ–π –≤–æ–ø—Ä–æ—Å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –∏–º–µ–Ω–Ω–æ –¥–ª—è —É—Ä–æ–≤–Ω—è 3 –∏ –ø–æ–∑–≤–æ–ª—è–ª —Ä–∞—Å–∫—Ä—ã—Ç—å –≥–ª—É–±–∏–Ω—É –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å.`,
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ JSON
	jsonData, err := json.Marshal(requestData)
	if err != nil {
		panic(err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", "application/json")

	log.Println(req)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	resp, err := c.httpClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	// –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
	responseData, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	log.Println("Status:", resp.Status)
	log.Println("Response:", string(responseData))
}

func (c Client) GetResultForQuestionRequest(uid string) bool {
	url := "https://gpt.orionsoft.ru/api/External/GetNewResponse"

	// –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
	requestData := GetResultForQuestionRequest{
		OperatingSystemCode: 12,
		APIKey:              "OrVrQoQ6T43vk0McGmHOsdvvTiX446RJ",
		DialogIdentifier:    uid,
	}

	jsonData, err := json.Marshal(requestData)
	if err != nil {
		panic(err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", "application/json")

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	// client := &http.Client{}
	log.Println(req)
	resp, err := c.httpClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	// –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	responseData, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	log.Println(string(responseData))

	var result FullResponse

	if err := json.Unmarshal(responseData, &result); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
		log.Println("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:", string(responseData))
		return false
	}

	if result.Data.LastMessage == "" {
		return false
	}

	log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:", result.Status.IsSuccess)
	log.Println("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:", result.Status.Description)
	log.Println("üë§ UserCrocCode:", result.Data.UserCrocCode)
	log.Println("üßæ DialogIdentifier:", result.Data.DialogIdentifier)
	log.Println("ü§ñ –ú–æ–¥–µ–ª—å:", result.Data.AIModelName)
	log.Println("üó®Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", result.Data.LastMessage)
	log.Println("‚è± –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:", result.Data.LastResponseTime)
	log.Println("üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:")

	for i, item := range result.Data.Context {
		log.Printf("  [%d] ‚ñ∂Ô∏è –ó–∞–ø—Ä–æ—Å (%s): %s", i+1, item.RequestTime, item.RequestMessage)
		log.Printf("      üí¨ –û—Ç–≤–µ—Ç  (%s): %s", item.ResponseTime, item.ResponseMessage)
	}
	return true

}

func (c Client) CleanContextRequest(uid string) {
	url := "https://gpt.orionsoft.ru/api/External/CompleteSession"

	// –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
	requestData := CompleteSessionRequest{
		OperatingSystemCode: 12,
		APIKey:              "OrVrQoQ6T43vk0McGmHOsdvvTiX446RJ",
		DialogIdentifier:    uid,
	}

	jsonData, err := json.Marshal(requestData)
	if err != nil {
		panic(err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", "application/json")

	log.Println(req)
	resp, err := c.httpClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	log.Println("Status:", resp.Status)
	log.Println("Response:", string(body))

}
